---
title: "Biostat 203B Homework 1"
subtitle: Due Jan 26, 2024 @ 11:59PM
author: "Yuhui Wang, UID: 606332401"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
---

Display machine information for reproducibility:
```{r}
#| eval: false
sessionInfo()
```

## Q1. Git/GitHub

**No handwritten homework reports are accepted for this course.** We work with Git and GitHub. Efficient and abundant use of Git, e.g., frequent and well-documented commits, is an important criterion for grading your homework.

1. Apply for the [Student Developer Pack](https://education.github.com/pack) at GitHub using your UCLA email. You'll get GitHub Pro account for free (unlimited public and private repositories).

2. Create a **private** repository `biostat-203b-2024-winter` and add `Hua-Zhou` and TA team (`Tomoki-Okuno` for Lec 1; `jonathanhori` and `jasenzhang1` for Lec 80) as your collaborators with write permission.

3. Top directories of the repository should be `hw1`, `hw2`, ... Maintain two branches `main` and `develop`. The `develop` branch will be your main playground, the place where you develop solution (code) to homework problems and write up report. The `main` branch will be your presentation area. Submit your homework files (Quarto file `qmd`, `html` file converted by Quarto, all code and extra data sets to reproduce results) in the `main` branch.

4. After each homework due date, course reader and instructor will check out your `main` branch for grading. Tag each of your homework submissions with tag names `hw1`, `hw2`, ... Tagging time will be used as your submission time. That means if you tag your `hw1` submission after deadline, penalty points will be deducted for late submission.

5. After this course, you can make this repository public and use it to demonstrate your skill sets on job market.

**Answer:** [github](https://github.com/yuhuiwang0801/biostat-203b-2024-winter)

## Q2. Data ethics training

This exercise (and later in this course) uses the [MIMIC-IV data v2.2](https://physionet.org/content/mimiciv/2.2/), a freely accessible critical care database developed by the MIT Lab for Computational Physiology. Follow the instructions at <https://mimic.mit.edu/docs/gettingstarted/> to (1) complete the CITI `Data or Specimens Only Research` course and (2) obtain the PhysioNet credential for using the MIMIC-IV data. Display the verification links to your completion report and completion certificate here. **You must complete Q2 before working on the remaining questions.** (Hint: The CITI training takes a few hours and the PhysioNet credentialing takes a couple days; do not leave it to the last minute.)

**Answer:** I have completed the training and obtained the PhysioNet credential. The verification links are as follows:[Completion Report](https://www.citiprogram.org/verify/?w690d3afe-9e18-4829-9b30-a097377712ec-60370444), [Completion Certificate](https://www.citiprogram.org/verify/?w690d3afe-9e18-4829-9b30-a097377712ec-60370444).
![](score.jpg) 
![](certificate.jpg)

## Q3. Linux Shell Commands

1. Make the MIMIC v2.2 data available at location `~/mimic`. 

**Answer:** I have downloaded the MIMIC v2.2 data and copy it from my desktop to the folder `~/mimic`, with code:
```{bash}
#| eval: false
cp -r /Users/wang/Desktop/mimic ~/
```

The following code shows the files in the folder.
```{bash}
#| eval: false
ls -l ~/mimic/
```
Refer to the documentation <https://physionet.org/content/mimiciv/2.2/> for details of data files. Please, do **not** put these data files into Git; they are big. Do **not** copy them into your directory. Do **not** decompress the gz data files. These create unnecessary big files and are not big-data-friendly practices. Read from the data folder `~/mimic` directly in following exercises. 

  Use Bash commands to answer following questions.

2. Display the contents in the folders `hosp` and `icu` using Bash command `ls -l`. Why are these data files distributed as `.csv.gz` files instead of `.csv` (comma separated values) files? Read the page <https://mimic.mit.edu/docs/iv/> to understand what's in each folder.


**Answer:**
```{bash}
#| eval: false
# display the contents in the folders hosp and icu
ls -l ~/mimic/hosp
ls -l ~/mimic/icu
```
That is because the data files are too large to be stored in `.csv` files. The `.csv.gz` files are compressed files, which are much smaller than the original files.


3. Briefly describe what Bash commands `zcat`, `zless`, `zmore`, and `zgrep` do.

**Answer:**
```{bash}
#| eval: false
printf "zcat\n"
man zcat | head -30
```

```{bash}
#| eval: false
printf "zless\n"
man zless | head -30
```

```{bash}
#| eval: false
printf "zmore\n"
man zmore | head -30
```

```{bash}
#| eval: false
printf "zgrep\n"
man zgrep | head -30
```
`zcat` is used to display the contents of a compressed file. `zless` is used to display the contents of a compressed file one screenful at a time. `zmore` is used to display the contents of a compressed file one screenful at a time. `zgrep` is used to search through compressed files for a regular expression.

4. (Looping in Bash) What's the output of the following bash script?
```{bash}
#| eval: false
for datafile in ~/mimic/hosp/{a,l,pa}*.gz
do
  ls -l $datafile
done
```
Display the number of lines in each data file using a similar loop. (Hint: combine linux commands `zcat <` and `wc -l`.)

**Answer:**
```{bash}
#| eval: false
for datafile in ~/mimic/hosp/{a,l,pa}*.gz
do
  printf "$datafile\n"
  zcat < $datafile | wc -l
done
```

5. Display the first few lines of `admissions.csv.gz`. How many rows are in this data file? How many unique patients (identified by `subject_id`) are in this data file? Do they match the number of patients listed in the `patients.csv.gz` file? (Hint: combine Linux commands `zcat <`, `head`/`tail`, `awk`, `sort`, `uniq`, `wc`, and so on.)

**Answer:**
```{bash}
#| eval: false
printf "The first 5 lines of admissions.csv.gz are:\n"
zcat < ~/mimic/hosp/admissions.csv.gz | head -5
```

```{bash}
#| eval: false
printf "The number of rows in this data file is:\n"
zcat < ~/mimic/hosp/admissions.csv.gz | wc -l
```

```{bash}
#| eval: false
printf "The number of unique patients is:\n"
zcat < ~/mimic/hosp/admissions.csv.gz | awk -F, '{print $1}' | sort | uniq | wc -l
```

```{bash}
#| eval: false
printf "The number of patients listed in the patients.csv.gz file is:\n"
zcat < ~/mimic/hosp/patients.csv.gz | wc -l
```
Therefore, the number of unique patients in `admissions.csv.gz` does not match the number of patients listed in the `patients.csv.gz` file.


6. What are the possible values taken by each of the variable `admission_type`, `admission_location`, `insurance`, and `ethnicity`? Also report the count for each unique value of these variables. (Hint: combine Linux commands `zcat`, `head`/`tail`, `awk`, `uniq -c`, `wc`, and so on; skip the header line.)

**Answer:**
```{bash}
#| eval: false
printf "The possible values taken by admission_type are:\n"
zcat < ~/mimic/hosp/admissions.csv.gz | awk -F, 'NR > 1 {print $6}' | sort | uniq -c
```

```{bash}
#| eval: false
printf "The possible values taken by admission_location are:\n"
zcat < ~/mimic/hosp/admissions.csv.gz | awk -F, 'NR > 1 {print $8}' | sort | uniq -c
```

```{bash}
#| eval: false
printf "The possible values taken by insurance are:\n"
zcat < ~/mimic/hosp/admissions.csv.gz | awk -F, 'NR > 1 {print $10}' | sort | uniq -c
```

```{bash}
#| eval: false
printf "The possible values taken by ethnicity are:\n"
zcat < ~/mimic/hosp/admissions.csv.gz | awk -F, 'NR > 1 {print $13}' | sort | uniq -c
```

7. _To compress, or not to compress. That's the question._ Let's focus on the big data file `labevents.csv.gz`. Compare compressed gz file size to the uncompressed file size. Compare the run times of `zcat < ~/mimic/labevents.csv.gz | wc -l` versus `wc -l labevents.csv`. Discuss the trade off between storage and speed for big data files. (Hint: `gzip -dk < FILENAME.gz > ./FILENAME`. Remember to delete the large `labevents.csv` file after the exercise.)

**Answer:**
```{bash}
#| eval: false
printf "The compressed gz file size is:\n"
ls -lh ~/mimic/hosp/labevents.csv.gz
```

```{bash}
#| eval: false
gzip -dk < ~/mimic/hosp/labevents.csv.gz > ./labevents.csv
printf "The uncompressed file size is:\n"
ls -lh labevents.csv
```

```{bash}
#| eval: false
printf "The run time comparison for compressed and uncompressed files are:\n"
time zcat < ~/mimic/hosp/labevents.csv.gz | wc -l
time wc -l labevents.csv
```
The compressed file size is 1.8G, while the uncompressed file size is 13G. The run time for the compressed file is 14.364s, while the run time for the uncompressed file is 13.720s. 

In general, it is a trade off between storage and speed. However, it is worth to use compressed files since the run time is not much longer than the uncompressed file, while the compressed file size is much smaller than the uncompressed file size.


## Q4. Who's popular in Price and Prejudice

1. You and your friend just have finished reading *Pride and Prejudice* by Jane Austen. Among the four main characters in the book, Elizabeth, Jane, Lydia, and Darcy, your friend thinks that Darcy was the most mentioned. You, however, are certain it was Elizabeth. Obtain the full text of the novel from <http://www.gutenberg.org/cache/epub/42671/pg42671.txt> and save to your local folder. 

```{bash}
#| eval: false
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
```

Explain what `wget -nc` does. Do **not** put this text file `pg42671.txt` in Git. Complete the following loop to tabulate the number of times each of the four characters is mentioned using Linux commands.

**Answer:**
`wget -nc` downloads the file from the given URL if it does not exist in the current directory, and does nothing if it already exists.

```{bash}
#| eval: false
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
for char in Elizabeth Jane Lydia Darcy
do
  echo $char:
  # some bash commands here
  grep -o -i $char pg42671.txt | wc -l
  
done
```

2. What's the difference between the following two commands?
```{bash}
#| eval: false
echo 'hello, world' > test1.txt
```
and
```{bash}
#| eval: false
echo 'hello, world' >> test2.txt
```

**Answer:**
The first command will overwrite the file `test1.txt` if it already exists, while the second command will append the text to the end of the file `test2.txt` if it already exists.

3. Using your favorite text editor (e.g., `vi`), type the following and save the file as `middle.sh`:
```{bash eval=FALSE}
#!/bin/sh
# Select lines from the middle of a file.
# Usage: bash middle.sh filename end_line num_lines
head -n "$2" "$1" | tail -n "$3"
```
Using `chmod` to make the file executable by the owner, and run
```{bash}
#| eval: false
./middle.sh pg42671.txt 20 5
```
Explain the output. Explain the meaning of `"$1"`, `"$2"`, and `"$3"` in this shell script. Why do we need the first line of the shell script?

**Answer:**
```{bash}
#| eval: false
chmod +x middle.sh
./middle.sh pg42671.txt 20 5
```

The output is the 5 lines starting from the 16th line to the 20th line of the file `pg42671.txt`. `"$1"`, `"$2"`, and `"$3"` are the first, second, and third arguments of the shell script, and it will be clarified when executing. We need the first line of the shell script to tell the system that this is a shell script.

## Q5. More fun with Linux

Try following commands in Bash and interpret the results: `cal`, `cal 2024`, `cal 9 1752` (anything unusual?), `date`, `hostname`, `arch`, `uname -a`, `uptime`, `who am i`, `who`, `w`, `id`, `last | head`, `echo {con,pre}{sent,fer}{s,ed}`, `time sleep 5`, `history | tail`.

**Answer:**
```{bash}
#| eval: false
printf "cal:\n"
cal
printf "cal 2024:\n"
cal 2024
printf "cal 9 1752:\n"
cal 9 1752
```

```{bash}
#| eval: false
printf "date:\n"
date
```

```{bash}
#| eval: false
printf "hostname:\n"
hostname
```

```{bash}
#| eval: false
printf "arch:\n"
arch
```

```{bash}
#| eval: false
printf "uname -a:\n"
uname -a
```

```{bash}
#| eval: false
printf "uptime:\n"
uptime
```

```{bash}
#| eval: false
printf "who am i:\n"
who am i
```

```{bash}
#| eval: false
printf "who:\n"
who
```

```{bash}
#| eval: false
printf "w:\n"
w
```

```{bash}
#| eval: false
printf "id:\n"
id
```

```{bash}
#| eval: false
printf "last | head:\n"
last | head
```

```{bash}
#| eval: false
printf "echo {con,pre}{sent,fer}{s,ed}:\n"
echo {con,pre}{sent,fer}{s,ed}
```

```{bash}
#| eval: false
printf "time sleep 5:\n"
time sleep 5
```

```{bash}
#| eval: false
printf "history | tail:\n"
history | tail
```
cal: Displays the calendar for the current month.

cal 2024: Shows the calendar for the entire year 2024.

cal 9 1752: Displays the calendar for September 1752. The calendar for September 1752 is different from other months because the Gregorian calendar was adopted in September 1752, and 11 days were skipped to make up for the difference between the Julian calendar and the Gregorian calendar.

date: Displays the current date and time.

hostname: Displays the name of the host.

arch: Displays the machine architecture.

uname -a: Displays the system information.

uptime: Displays the current time, how long the system has been running, how many users are currently logged on, and the system load averages for the past 1, 5, and 15 minutes.

who am i: Displays the current user.

who: Displays the users who are currently logged on.

w: Displays the users who are currently logged on and what they are doing.

id: Displays the current user's UID, GID, and groups.

last | head: Displays the last 10 logins.

echo {con,pre}{sent,fer}{s,ed}: Displays the words "consents", "confer", "presents", "prefer", "sents", "sented", "confers", "confered", "prefers", "prefered".

time sleep 5: Displays the time it takes to execute the command "sleep 5".

history | tail: Displays the last 10 commands in the history.



## Q6. Book

1. Git clone the repository <https://github.com/christophergandrud/Rep-Res-Book> for the book _Reproducible Research with R and RStudio_ to your local machine. 

2. Open the project by clicking `rep-res-3rd-edition.Rproj` and compile the book by clicking `Build Book` in the `Build` panel of RStudio. (Hint: I was able to build `git_book` and `epub_book` but not `pdf_book`.)

The point of this exercise is (1) to get the book for free and (2) to see an example how a complicated project such as a book can be organized in a reproducible way.

For grading purpose, include a screenshot of Section 4.1.5 of the book here.

**Answer:**
![](4.1.5.jpg)